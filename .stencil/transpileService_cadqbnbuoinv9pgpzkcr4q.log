{"moduleFile":{"sourceFilePath":"/Users/david/Projects/davidenke/carage/src/utils/model.utils.ts","jsFilePath":"/Users/david/Projects/davidenke/carage/src/utils/model.utils.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"const propertyTypes = new Map();\r\nconst setPropertyType = (namespace, property, metadata) => {\r\n    // prepare namespace if necessary\r\n    if (!propertyTypes.has(namespace)) {\r\n        propertyTypes.set(namespace, new Map());\r\n    }\r\n    // set the property type\r\n    propertyTypes\r\n        .get(namespace)\r\n        .set(property, metadata);\r\n};\r\nexport class Model {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.setData(data);\r\n    }\r\n    setData(data) {\r\n        const metadata = this.getMetadata();\r\n        Object\r\n            .keys(data)\r\n            .forEach(property => {\r\n            this[property] = metadata\r\n                .get(property)\r\n                .parse(data[property]);\r\n        });\r\n    }\r\n    getMetadata() {\r\n        return propertyTypes.get(this.constructor.name);\r\n    }\r\n    clone() {\r\n        return new this();\r\n    }\r\n    serialize() {\r\n        const metadata = this.getMetadata();\r\n        return Array\r\n            .from(metadata.keys())\r\n            .reduce((data, property) => {\r\n            data[property] = metadata.get(property).serialize(this[property]);\r\n            return data;\r\n        }, {});\r\n    }\r\n    toJSON() {\r\n        return this.serialize();\r\n    }\r\n}\r\nexport const TextType = ({ label, required } = {}) => ({ constructor }, propertyKey) => {\r\n    const parse = (value) => value;\r\n    const serialize = (value) => value;\r\n    setPropertyType(constructor.name, propertyKey.toString(), { type: 'text', label, required, parse, serialize });\r\n};\r\nexport const NumberType = ({ label, required } = {}) => ({ constructor }, propertyKey) => {\r\n    const parse = (value) => value;\r\n    const serialize = (value) => value;\r\n    setPropertyType(constructor.name, propertyKey.toString(), { type: 'number', label, required, parse, serialize });\r\n};\r\nexport const DateType = ({ label, required } = {}) => ({ constructor }, propertyKey) => {\r\n    const parse = (value) => new Date(value);\r\n    const serialize = (value) => value.toISOString();\r\n    setPropertyType(constructor.name, propertyKey.toString(), { type: 'date', label, required, parse, serialize });\r\n};\r\nexport const ImageType = ({ label, required } = {}) => ({ constructor }, propertyKey) => {\r\n    const parse = (value) => value;\r\n    const serialize = (value) => value;\r\n    setPropertyType(constructor.name, propertyKey.toString(), { type: 'image', label, required, parse, serialize });\r\n};\r\n"}