{"moduleFile":{"sourceFilePath":"/Users/david/Projects/davidenke/carage/src/utils/model.utils.ts","jsFilePath":"/Users/david/Projects/davidenke/carage/src/utils/model.utils.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"const propertyTypes = new Map();\r\nconst setPropertyType = (namespace, property, type, label = property) => {\r\n    // prepare namespace if necessary\r\n    if (!propertyTypes.has(namespace)) {\r\n        propertyTypes.set(namespace, new Map());\r\n    }\r\n    // set the property type\r\n    propertyTypes\r\n        .get(namespace)\r\n        .set(property, { type, label });\r\n};\r\nexport class Model {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.setData(data);\r\n    }\r\n    setData(data) {\r\n        Object.assign(this, data);\r\n    }\r\n    getMetadata() {\r\n        return propertyTypes.get(this.constructor.name);\r\n    }\r\n    toJSON() {\r\n        const serializedData = Array\r\n            .from(this.getMetadata().keys())\r\n            .reduce((data, property) => {\r\n            data[property] = this[property];\r\n            return data;\r\n        }, {});\r\n        return JSON.stringify(serializedData);\r\n    }\r\n}\r\nexport const StringType = ({ label } = {}) => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'string', label);\r\n};\r\nexport const NumberType = ({ label } = {}) => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'number', label);\r\n};\r\nexport const DateType = ({ label } = {}) => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'date', label);\r\n};\r\nexport const ImageType = ({ label } = {}) => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'image', label);\r\n};\r\n"}