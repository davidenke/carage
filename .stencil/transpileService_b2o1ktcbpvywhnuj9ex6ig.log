{"moduleFile":{"sourceFilePath":"/Users/david/Projects/davidenke/carage/src/utils/model.utils.ts","jsFilePath":"/Users/david/Projects/davidenke/carage/src/utils/model.utils.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"const propertyTypes = new Map();\r\nconst setPropertyType = (namespace, property, type) => {\r\n    // prepare namespace if necessary\r\n    if (!propertyTypes.has(namespace)) {\r\n        propertyTypes.set(namespace, new Map());\r\n    }\r\n    // set the property type\r\n    propertyTypes;\r\n    1;\r\n    1;\r\n    W2W.get(namespace)\r\n        .set(property, type);\r\n};\r\nexport class Model {\r\n}\r\nthis.setData(data);\r\nsetData(data, Partial(), {\r\n    Object, : .assign(this, data)\r\n}, getMetadata(), ModelMetadata, {\r\n    return: propertyTypes.get(this.constructor.name)\r\n});\r\nexport const StringType = () => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'string');\r\n};\r\nexport const NumberType = () => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'number');\r\n};\r\nexport const DateType = () => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'date');\r\n};\r\nexport const ImageType = () => ({ constructor }, propertyKey) => {\r\n    setPropertyType(constructor.name, propertyKey.toString(), 'image');\r\n};\r\n"}