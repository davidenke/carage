/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  CarModel,
} from './models/car.model';
import {
  Model,
} from './utils/model.utils';

export namespace Components {
  interface CarageButton {
    'expand': boolean;
  }
  interface CarageCar {
    'model': CarModel;
  }
  interface CarageCard {
    'closable': boolean;
  }
  interface CarageCars {}
  interface CarageEditDate {
    'disabled': boolean;
    'errored': boolean;
    'placeholder': string;
    'required': boolean;
    'value': Date;
  }
  interface CarageEditImage {
    'disabled': boolean;
    'errored': boolean;
    'placeholder': string;
    'required': boolean;
    'value': string;
  }
  interface CarageEditNumber {
    'disabled': boolean;
    'errored': boolean;
    'placeholder': string;
    'required': boolean;
    'value': number;
  }
  interface CarageEditText {
    'disabled': boolean;
    'errored': boolean;
    'multiline': boolean;
    'placeholder': string;
    'required': boolean;
    'value': string;
  }
  interface CarageEditor {
    'model': Model;
  }
  interface CarageRoot {}
}

declare global {


  interface HTMLCarageButtonElement extends Components.CarageButton, HTMLStencilElement {}
  var HTMLCarageButtonElement: {
    prototype: HTMLCarageButtonElement;
    new (): HTMLCarageButtonElement;
  };

  interface HTMLCarageCarElement extends Components.CarageCar, HTMLStencilElement {}
  var HTMLCarageCarElement: {
    prototype: HTMLCarageCarElement;
    new (): HTMLCarageCarElement;
  };

  interface HTMLCarageCardElement extends Components.CarageCard, HTMLStencilElement {}
  var HTMLCarageCardElement: {
    prototype: HTMLCarageCardElement;
    new (): HTMLCarageCardElement;
  };

  interface HTMLCarageCarsElement extends Components.CarageCars, HTMLStencilElement {}
  var HTMLCarageCarsElement: {
    prototype: HTMLCarageCarsElement;
    new (): HTMLCarageCarsElement;
  };

  interface HTMLCarageEditDateElement extends Components.CarageEditDate, HTMLStencilElement {}
  var HTMLCarageEditDateElement: {
    prototype: HTMLCarageEditDateElement;
    new (): HTMLCarageEditDateElement;
  };

  interface HTMLCarageEditImageElement extends Components.CarageEditImage, HTMLStencilElement {}
  var HTMLCarageEditImageElement: {
    prototype: HTMLCarageEditImageElement;
    new (): HTMLCarageEditImageElement;
  };

  interface HTMLCarageEditNumberElement extends Components.CarageEditNumber, HTMLStencilElement {}
  var HTMLCarageEditNumberElement: {
    prototype: HTMLCarageEditNumberElement;
    new (): HTMLCarageEditNumberElement;
  };

  interface HTMLCarageEditTextElement extends Components.CarageEditText, HTMLStencilElement {}
  var HTMLCarageEditTextElement: {
    prototype: HTMLCarageEditTextElement;
    new (): HTMLCarageEditTextElement;
  };

  interface HTMLCarageEditorElement extends Components.CarageEditor, HTMLStencilElement {}
  var HTMLCarageEditorElement: {
    prototype: HTMLCarageEditorElement;
    new (): HTMLCarageEditorElement;
  };

  interface HTMLCarageRootElement extends Components.CarageRoot, HTMLStencilElement {}
  var HTMLCarageRootElement: {
    prototype: HTMLCarageRootElement;
    new (): HTMLCarageRootElement;
  };
  interface HTMLElementTagNameMap {
    'carage-button': HTMLCarageButtonElement;
    'carage-car': HTMLCarageCarElement;
    'carage-card': HTMLCarageCardElement;
    'carage-cars': HTMLCarageCarsElement;
    'carage-edit-date': HTMLCarageEditDateElement;
    'carage-edit-image': HTMLCarageEditImageElement;
    'carage-edit-number': HTMLCarageEditNumberElement;
    'carage-edit-text': HTMLCarageEditTextElement;
    'carage-editor': HTMLCarageEditorElement;
    'carage-root': HTMLCarageRootElement;
  }
}

declare namespace LocalJSX {
  interface CarageButton {
    'expand'?: boolean;
  }
  interface CarageCar {
    'model'?: CarModel;
  }
  interface CarageCard {
    'closable'?: boolean;
    'onClose'?: (event: CustomEvent<void>) => void;
  }
  interface CarageCars {}
  interface CarageEditDate {
    'disabled'?: boolean;
    'errored'?: boolean;
    'onValueChanged'?: (event: CustomEvent<Date>) => void;
    'placeholder'?: string;
    'required'?: boolean;
    'value'?: Date;
  }
  interface CarageEditImage {
    'disabled'?: boolean;
    'errored'?: boolean;
    'onValueChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'required'?: boolean;
    'value'?: string;
  }
  interface CarageEditNumber {
    'disabled'?: boolean;
    'errored'?: boolean;
    'onValueChanged'?: (event: CustomEvent<number>) => void;
    'placeholder'?: string;
    'required'?: boolean;
    'value'?: number;
  }
  interface CarageEditText {
    'disabled'?: boolean;
    'errored'?: boolean;
    'multiline'?: boolean;
    'onValueChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'required'?: boolean;
    'value'?: string;
  }
  interface CarageEditor {
    'model'?: Model;
    'onClose'?: (event: CustomEvent<void>) => void;
    'onSave'?: (event: CustomEvent<Model>) => void;
  }
  interface CarageRoot {}

  interface IntrinsicElements {
    'carage-button': CarageButton;
    'carage-car': CarageCar;
    'carage-card': CarageCard;
    'carage-cars': CarageCars;
    'carage-edit-date': CarageEditDate;
    'carage-edit-image': CarageEditImage;
    'carage-edit-number': CarageEditNumber;
    'carage-edit-text': CarageEditText;
    'carage-editor': CarageEditor;
    'carage-root': CarageRoot;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'carage-button': LocalJSX.CarageButton & JSXBase.HTMLAttributes<HTMLCarageButtonElement>;
      'carage-car': LocalJSX.CarageCar & JSXBase.HTMLAttributes<HTMLCarageCarElement>;
      'carage-card': LocalJSX.CarageCard & JSXBase.HTMLAttributes<HTMLCarageCardElement>;
      'carage-cars': LocalJSX.CarageCars & JSXBase.HTMLAttributes<HTMLCarageCarsElement>;
      'carage-edit-date': LocalJSX.CarageEditDate & JSXBase.HTMLAttributes<HTMLCarageEditDateElement>;
      'carage-edit-image': LocalJSX.CarageEditImage & JSXBase.HTMLAttributes<HTMLCarageEditImageElement>;
      'carage-edit-number': LocalJSX.CarageEditNumber & JSXBase.HTMLAttributes<HTMLCarageEditNumberElement>;
      'carage-edit-text': LocalJSX.CarageEditText & JSXBase.HTMLAttributes<HTMLCarageEditTextElement>;
      'carage-editor': LocalJSX.CarageEditor & JSXBase.HTMLAttributes<HTMLCarageEditorElement>;
      'carage-root': LocalJSX.CarageRoot & JSXBase.HTMLAttributes<HTMLCarageRootElement>;
    }
  }
}


